"""
3) Создайте собственный класс-исключение, который должен проверять содержимое списка на
наличие только чисел. Проверить работу исключения на реальном примере. Необходимо
запрашивать у пользователя данные и заполнять список только числами. Класс-исключение
должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока
пользователь сам не остановит работу скрипта, введя, например, команду “stop”. При этом
скрипт завершается, сформированный список с числами выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и
строки. При вводе пользователем очередного элемента необходимо реализовать проверку
типа элемента и вносить его в список, только если введено число. Класс-исключение должен
не позволить пользователю ввести текст (не число) и отобразить соответствующее
сообщение. При этом работа скрипта не должна завершаться.
"""

STOP = 'stop'


class My_ValueError(ValueError):
    def __init__(self, txt):
        self.txt = txt


def element_checker(element: str):
    try:
        if element == STOP or element.isdigit():
            return element
        else:
            raise My_ValueError('It is not a number')
    except My_ValueError as err:
        print(err)


if __name__ == '__main__':
    my_list = []
    while True:
        new_element = element_checker(input('Enter the number:'))
        if new_element == STOP:
            break
        elif new_element:
            my_list.append(int(new_element))
    print(my_list)
